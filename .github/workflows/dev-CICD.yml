name: Frontend CI & CD

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
jobs:
  unit-tests:
    name: 🔨 Unit Tests
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'pull_request' &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, '[ci skip]')
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - run: npm ci
      - run: npm run test:unit

  deploy-frontend:
    name: 🚀 Deploy Frontend
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' &&
      !contains(github.event.head_commit.message, '[skip cd]') &&
      !contains(github.event.head_commit.message, '[cd skip]')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_FOR_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_FOR_ACTIONS }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine ENV & App Names
        id: meta
        shell: bash
        run: |
          # 1) 배포 stage 
          deploy_env=dev

          # 2) 서비스명 고정
          service_name=9_meow_fe

          # 3) 레지스트리 끝의 슬래시 제거
          registry="${{ secrets.ECR_REGISTRY }}"
          registry="${registry%/}"

          # 4) IMAGE_URI 조합 (shell 변수 사용!!)
          image_uri="${registry}/${deploy_env}/${service_name}"

          # 5) 환경변수로 내보내기
          echo "ENV=${deploy_env}"       >> $GITHUB_ENV
          echo "SERVICE=${service_name}" >> $GITHUB_ENV
          echo "REGISTRY=${registry}"    >> $GITHUB_ENV
          echo "IMAGE_URI=${image_uri}"  >> $GITHUB_ENV
          echo "APP_NAME=meow-${deploy_env}-deployment" >> $GITHUB_ENV
          echo "DG_NAME=meow-${deploy_env}-deployment_group" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache buildx layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.ENV }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ env.ENV }}-

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context:
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}
            VITE_AI_API_URL=${{ secrets.VITE_AI_API_URL_DEV }}
            VITE_CLOUDFRONT_URL=${{ secrets.VITE_CLOUDFRONT_URL }}
          push: true
          tags: |
            ${{ env.IMAGE_URI }}:${{ github.sha }}
            ${{ env.IMAGE_URI }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Trigger CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.APP_NAME }} \
            --deployment-group-name ${{ env.DG_NAME }} \
            --s3-location bucket=${{ secrets.DEPLOY_BUCKET }},key=${ENV}/deploy-bundle.zip,bundleType=zip
