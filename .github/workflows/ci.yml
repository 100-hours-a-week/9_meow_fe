name: Frontend CI & CD

on:
  push:
    branches:
      - develop 
      - 'release/**'
  pull_request:
    branches:
      - develop
      - 'release/**'
      - main

jobs:
  unit-tests:
    name: üî® Unit Tests
    runs-on: ubuntu-latest
    if: >
      !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.head_commit.message, '[ci skip]')
      && (
        ( github.event_name == 'pull_request'
             && github.base_ref == 'develop'
             && contains(github.head_ref, 'feat')
        )
      )
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Run Unit (Build) Test
        run: npm run test:unit

  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: >
      !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.head_commit.message, '[ci skip]')
      && github.event_name == 'pull_request'
      && contains(github.base_ref, 'release')
      && github.head_ref == 'develop'
      
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          MYSQL_DATABASE: community_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s --health-retries=3
    env:
      BACKEND_PORT: 8080
      FRONTEND_PORT: 4173
    steps:
      - uses: actions/checkout@v3

      - name: Checkout Backend for Integration
        uses: actions/checkout@v3
        with:
          repository: 100-hours-a-week/9_meow_be
          token: ${{ secrets.GITHUB_TOKEN }}
          path: backend

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Start Backend with DB
        run: |
          cd backend
          mvn clean package -DskipTests
          java -jar target/*.jar &

      - name: Wait for Backend Health
        run: |
          for i in {1..12}; do
            curl -sf http://localhost:$BACKEND_PORT/api/health && break
            sleep 5
          done

      - name: Build & Preview Frontend
        run: |
          npm run build
          npm run preview &

      - name: Wait for Frontend Ready
        run: |
          for i in {1..6}; do
            curl -sf http://localhost:$FRONTEND_PORT/ && break
            sleep 5
          done

      - name: Check Backend API via Frontend
        run: curl -f http://localhost:$FRONTEND_PORT/api/health

  deploy-frontend:
    name: üöÄ Deploy Frontend
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, '[skip cd]')
      && !contains(github.event.head_commit.message, '[cd skip]')
      &&  github.event_name == 'push' 
      && github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_FOR_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_FOR_ACTIONS }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine ECR Namespace
        id: ns
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH" == "develop" ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
          elif [[ "$BRANCH" =~ ^release/ ]]; then
            echo "ENV=release" >> $GITHUB_ENV
          elif [[ "$BRANCH" == "main" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
          else
            echo "ENV=skip" >> $GITHUB_ENV
          fi

      - name: Build, Tag & Push to ECR
        if: env.ENV != 'skip'
        run: |
          SERVICE=9_meow_fe
          IMAGE_URI=${{ secrets.ECR_REGISTRY }}/${ENV}/${SERVICE}
          # ÎπåÎìú Î∞è latest ÌÉúÍ∑∏
          docker build --build-arg VITE_API_URL=/api -t $IMAGE_URI:latest .
          # ECRÏóê ÏóÖÎ°úÎìú
          docker push $IMAGE_URI:latest

      - name: Start SSH Agent (FE)
        if: env.ENV != 'skip'
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Deploy FE via update.sh
        if: env.ENV != 'skip'
        uses: appleboy/ssh-action@v0.1.8
        with:
          host:      ${{ secrets.SERVER_HOST }}
          username:  ubuntu
          key:       ${{ secrets.SERVER_SSH_KEY }}
          port:      22
          script:    /home/ubuntu/meow/deployment/update.sh
